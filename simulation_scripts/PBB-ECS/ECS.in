# This is an input script that performs equilibrion, compression and shearing
# Simulations on the Polymer Brush Bilayer read from MDPBB.rst

clear


#--- Read in the Restart file ---#
if "${rest} == 1" then &
    "read_restart    ECS.rst"    &
    "variable      skip      equal 1" &
    "log log.lammps append" &
    "jump    ECS.in rest_skip1"


if "${skip} == 0" then &
    "read_restart    PBB.rst" &
    "reset_timestep  0"         &
else &
    "read_restart    EC.rst"    &
    "reset_timestep  $(v_Nequil + v_Npre + v_Ncomp)"

label rest_skip1
###################################################################################################################################### Start

#--- Pair Interactions ---#

neigh_modify   every 1 delay 10 check yes           # default delay=10 otherwise default
neigh_modify  cluster yes

variable Ntab equal 1000
variable inner equal 0.3
variable outer equal 2.5
if "${TStat} == D" then "jump ECS.in toBonds"

if "${PStyle} == W" then "jump ECS.in LJ-WCA" &
elif "${PStyle} == T"  "jump ECS.in LJ-TS" &
elif "${PStyle} == C"  "jump ECS.in LJ-COS" &
else "jump ECS.in toBonds"

label LJ-WCA
pair_style	  lj/cut $(1.122462 * v_sigLJ )        # LJ potential with rc=2^1/6
pair_coeff    * * ${epsLJ} ${sigLJ}   # LJ potential between all atoms
pair_coeff    1 1 0.0 0.0             # Except between wall atoms and themselves
pair_modify shift yes
jump ECS.in toBonds

label LJ-TS
pair_style	  lj/cut $(2.1 * v_sigLJ )        # LJ potential with rc=2^1/6
pair_coeff    1 * ${epsLJ} ${sigLJ} $(v_WX * v_sigLJ )   # LJ potential between all atoms
pair_coeff    2 2 ${epsLJ} ${sigLJ} $(v_BB * v_sigLJ )   # LJ potential between all atoms
pair_coeff    2 3 ${epsLJ} ${sigLJ} $(v_BT * v_sigLJ )   # LJ potential between all atoms
pair_coeff    2 4 ${epsLJ} ${sigLJ} $(v_BS * v_sigLJ )   # LJ potential between all atoms
pair_coeff    3 3 ${epsLJ} ${sigLJ} $(v_TT * v_sigLJ )   # LJ potential between all atoms
pair_coeff    3 4 ${epsLJ} ${sigLJ} $(v_TS * v_sigLJ )   # LJ potential between all atoms
pair_coeff    4 4 ${epsLJ} ${sigLJ} $(v_SS * v_sigLJ )   # LJ potential between all atoms
pair_coeff    1 1 0.0 0.0             # Except between wall atoms and themselves
pair_modify shift yes
jump ECS.in toBonds

label LJ-COS
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${WX} ${Ntab} ${inner} ${outer} "WX" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${BB} ${Ntab} ${inner} ${outer} "BB" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${BT} ${Ntab} ${inner} ${outer} "BT" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${BS} ${Ntab} ${inner} ${outer} "BS" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${TT} ${Ntab} ${inner} ${outer} "TT" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${TS} ${Ntab} ${inner} ${outer} "TS" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${SS} ${Ntab} ${inner} ${outer} "SS" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 0.0 ${sigLJ} 0.0 ${Ntab} ${inner} ${outer} "WW" format fffiffs file LJ_COS.py
python        LJ_COS invoke
pair_style table linear ${Ntab}
pair_coeff 1 * LJ-COS.txt WX 2.5
pair_coeff 2 2 LJ-COS.txt BB 2.5
pair_coeff 2 3 LJ-COS.txt BT 2.5
pair_coeff 2 4 LJ-COS.txt BS 2.5
pair_coeff 3 3 LJ-COS.txt TT 2.5
pair_coeff 3 4 LJ-COS.txt TS 2.5
pair_coeff 4 4 LJ-COS.txt SS 2.5
pair_coeff 1 1 LJ-COS.txt WW 2.5

label toBonds


#--- Redefine the bond coeffs ---#

#bond_style    hybrid fene harmonic                      # Finitely extensible linearly elastic bond between neighbouring beads
bond_coeff    1 fene ${kFENE} ${RmFENE} ${epsLJ} ${sigLJ}                # (K, Rmax) for FENE and (sigma, epsilon) for LJ
bond_coeff    2 harmonic 800.0 $(1.5874 * sqrt(2)/2)                     # (K,ro) ro is the equilibrium distance
#special_bonds fene                                                       # This kills the pairwise energy between all atoms that are directly bonded



#--- Define variables ---#

# for dimensional values: eps = 4.14e-21 J at T = 300K and sigma = 0.5nm
variable     M_Ri  equal $(floor((v_R_frac * v_R_M_scale) * (v_M)))
variable     M_Lo  equal $(floor((v_L_frac * v_L_M_scale) * (v_M)))
variable     M_ln equal $(v_M - (v_M_Ri/v_R_M_scale) - (v_M_Lo/v_L_M_scale))
variable     M_chains   equal $(v_M_ln + v_M_Ri + v_M_Lo)

variable     G      equal $((v_M_ln + v_M_Ri + (v_M_Lo/v_L_M_scale))+1)

variable        Vwall     equal $(v_Vwalli)                   # This is to convert them from index style to float

# For Equilibration - density profiles (10 for entire run)
variable       Nfreqe   equal ${Nequil}/10                  # Calculate bin averages every this many timesteps
variable       Neverye  equal 100                           # Use input values every this many timesteps
variable       Nrepeate equal ${Nfreqe}/${Neverye}          # Number of times to use input values
variable       Ndump_e  equal $(floor(v_Nequil/v_NFrames_e))

# For compression - density profiles (10 for entire run)
variable       Nfreqc   equal ${Ncomp}/10                  # Calculate bin averages every this many timesteps
variable       Neveryc  equal 100                          # Use input values every this many timesteps
variable       Nrepeatc equal ${Nfreqc}/${Neveryc}         # Number of times to use input values
variable       Ndump_c  equal $(floor((v_Ncomp + v_Npre)/v_NFrames_c))

variable       Nshear_lap    equal $((2 * v_xhi * v_laps)/(v_Vwall * v_Tstep))
if "${Nshear_lap} < ${Nshear_min}" then "variable Nshear equal v_Nshear_min" &
elif "${Nshear_lap} > ${Nshear_max}" "variable Nshear equal v_Nshear_max" &
else "variable Nshear equal $(round(v_Nshear_lap/10000) * 10000)"

variable Nupto equal $(v_Nequil + v_Npre + v_Ncomp + v_Nshear)

# For Shear - density profiles (10 for entire run)
variable       Nfreqs   equal ${Nshear}/10                 # Calculate bin averages every this many timesteps
variable       Neverys  equal 100                          # Use input values every this many timesteps
variable       Nrepeats equal ${Nfreqs}/${Neverys}         # Number of times to use input values
variable       Ndump_s equal $(floor(v_Nshear/v_NFrames_s))

variable       binres   equal  0.001                       # Giving 1000 data points across the sim. box

variable       bwzmin  equal bound(bwall,zmin)             # Bottom wall zmin
variable       bwzmax  equal bound(bwall,zmax)             # Bottom wall zmax
variable       twzmin  equal bound(twall,zmin)             # Top wall zmin
variable       twzmax  equal bound(twall,zmax)             # Top Wall zmax
variable       surfcov equal $(v_G/(lx*ly))                # Calculate the surface coverage (Grafting Density)

if "${skip} == 1" then "jump ECS.in skip1"

############################################################################################################################################## Stop
#--- Define regions and groups ---#

region         bwallb  block  INF INF INF INF ${bwzmin} $(v_bwzmin + 0.4) units box           # Bottom wall bottom layer
region         bwallm  block  INF INF INF INF $(v_bwzmin + 0.35) $(v_bwzmax - 0.35) units box # Bottom wall bulk layers
region         bwallt  block  INF INF INF INF $(v_bwzmax - 0.7) $(v_bwzmax) units box         # Bottom wall top layer
region         bmelt   block  INF INF INF INF $(v_bwzmax) $(v_twzmax / 2) units box           # Bottom half of melt region
region         tmelt   block  INF INF INF INF $(v_twzmax / 2)  $(v_twzmin - 0.1) units box    # Top half of melt region
region         twallb  block  INF INF INF INF $(v_twzmin - 0.1) $(v_twzmin + 0.35) units box  # Top wall bottom layer
region         twallm  block  INF INF INF INF $(v_twzmin + 0.35) $(v_twzmax - 0.35) units box # Top wall bulk layers
region         twallt  block  INF INF INF INF $(v_twzmax - 0.35) $(v_twzmax) units box        # Top wall top layer

group          bwsurf  region bwallt                # group of Bottom Wall Inner atoms
group          bwbulk  region bwallm                # group of Bottom wall bulk atoms
group          bwout   region bwallb                # group of .Bottom wall Outer atoms
group          bbeads  type 2                 # group of bottom beads
group          tbeads  type 3                 # group of top beads
group          cbeads  union  bbeads tbeads         # group of all beads
group          sbeads  type 4                 # group of top beads
group          abeads  union  cbeads sbeads         # group of all beads
group          twsurf  region twallb                # group of Top wall Inner atoms
group          twbulk  region twallm                # group of Top wall bulk atoms
group          twout   region twallt                # group of Top wall Outer atoms
group          rest4bot union abeads twall          # for use with group/group computes
group          rest4top union abeads bwall          # for use with group/group computes
group          walls    type 1           # group of all wall atoms
group          alltop   union twall tbeads          # group of all top atoms
group          tstatbeads union bwbulk twbulk abeads


# Other groups are: gbeads ebeads fbeads bwall twall
#################################################################################################################################################### Start
label           skip1
#info            system
#info            coeffs

variable       boutz  equal xcm(bwout,z)             # Bottom wall zmin
variable       bsurfz  equal xcm(bwsurf,z)             # Bottom wall zmax
variable       tsurfz  equal xcm(twsurf,z)             # Top wall zmin
variable       toutz  equal xcm(twout,z)             # Top Wall zmax
variable       D       equal v_tsurfz-v_bsurfz             # Calculate the Wall Seperation Distace
variable       D_out    equal v_toutz-v_boutz             # Calculate outer wall seperation distance
variable       srate   equal (v_Vwall/v_D)                 # Calculate the shear rate NOTE:  make this much better
############
# Computes #
############

compute         Vir all pressure thermo_temp virial  # Computes the Virial Stress tensor for the entire simulation box
compute         melTemp   abeads temp                # Computes the temp of just the melt
compute         melPress  all    pressure melTemp    # Computes the melt pressure
compute         wallTemp  walls  temp                # Computes Wall tempterature
compute         wallPress all    pressure wallTemp   # Computes wall pressure
variable        melDens   equal  $(mass(abeads))/(lx*ly*v_D) # Calculate the melt density

#--- Forces and Energies ---#

variable        COF       equal  (-pxz/pzz)
variable        visc      equal  (-pxz/v_srate)

# Group/Group computes to try and calculate the forces on walls (Not compatible with DPD tstat)
# compute         fbwall  bwall group/group rest4bot
# compute         ftwall  twall group/group rest4top
# compute         fwalls  bwall group/group twall

variable        Pn_b equal fcm(bwsurf,z)/(lx*ly)
variable        Ps_b equal fcm(bwsurf,x)/(lx*ly)
variable        Pn_t equal fcm(twsurf,z)/(lx*ly)
variable        Ps_t equal fcm(twsurf,x)/(lx*ly)


#--- Radius of gyration of the bottom brush chains ---#
compute         chunk_bot bbeads chunk/atom molecule         # Creates a chunkID for each molecule
compute         rgbbeads bbeads gyration/chunk chunk_bot     # Calculates the radius of gyration of each molecule into a vector
variable        aveRg    equal  (ave(c_rgbbeads))            # Average the vector values into a single value to ouput in thermo

compute         rgbten bbeads gyration/chunk chunk_bot tensor    # Calculates the radius of gyration of each molecule into a vector
variable        aveRgx    equal  (ave(c_rgbten[1]))            # Average the vector values into a single value to ouput in thermo
variable        aveRgy    equal  (ave(c_rgbten[2]))
variable        aveRgz    equal  (ave(c_rgbten[3]))

#--- Fixes (Equil) ---#

# Apply a velocity distribution to the molecules
#velocity       abeads create ${Temp} 290842 dist gaussian
#fix             nvt_melt    abeads nvt temp ${Temp} ${Temp} 100.0

# NVE for all
fix             nve_melt abeads nve
fix             nve_walls  walls nve

if "${TStat} == W" then "jump ECS.in TWEC" &
elif "${TStat} == L"  "jump ECS.in LTEC" &
elif "${TStat} == D"  "jump ECS.in DTEC" &
else "jump ECS.in toFreeze"

label TWEC # apply a thermostat only to the bulk wall atoms in all directions

fix             lang_tbulk twbulk langevin $T $T ${Damp} 87239 zero yes
fix             lang_bbulk bwbulk langevin $T $T ${Damp} 87239 zero yes

jump ECS.in toFreeze
label LTEC # apply a langevin thermostat to both the bulk wall and the beads

fix             lang_melt abeads langevin $T $T ${Damp} 87239
fix             lang_tbulk twbulk langevin $T $T ${Damp} 87239 zero yes
fix             lang_bbulk bwbulk langevin $T $T ${Damp} 87239 zero yes

jump ECS.in toFreeze

label DTEC # apply a DPD thermostat to all beads
comm_modify vel yes
if "${PStyle} == W" then "jump ECS.in DT-WCA" &
elif "${PStyle} == T"  "jump ECS.in DT-TS" &
elif "${PStyle} == C"  "jump ECS.in DT-COS" &
else "jump ECS.in toFreeze"

label DT-WCA

pair_style hybrid/overlay lj/cut $(1.122462 * v_sigLJ ) dpd/tstat $T $T 2.5 15223
pair_coeff    * * lj/cut ${epsLJ} ${sigLJ}   # LJ potential between all atoms
pair_coeff    1 1 lj/cut 0.0 0.0             # Except between wall atoms and themselves
pair_modify pair lj/cut shift yes

pair_coeff * * dpd/tstat ${Damp}

jump ECS.in toFreeze

label DT-TS
pair_style hybrid/overlay lj/cut $(2.5 * v_sigLJ ) dpd/tstat $T $T 2.5 15223
pair_coeff    1 * lj/cut ${epsLJ} ${sigLJ} $(v_WX * v_sigLJ )   # LJ potential between all atoms
pair_coeff    2 2 lj/cut ${epsLJ} ${sigLJ} $(v_BB * v_sigLJ )   # LJ potential between all atoms
pair_coeff    2 3 lj/cut ${epsLJ} ${sigLJ} $(v_BT * v_sigLJ )   # LJ potential between all atoms
pair_coeff    2 4 lj/cut ${epsLJ} ${sigLJ} $(v_BS * v_sigLJ )   # LJ potential between all atoms
pair_coeff    3 3 lj/cut ${epsLJ} ${sigLJ} $(v_TT * v_sigLJ )   # LJ potential between all atoms
pair_coeff    3 4 lj/cut ${epsLJ} ${sigLJ} $(v_TS * v_sigLJ )   # LJ potential between all atoms
pair_coeff    4 4 lj/cut ${epsLJ} ${sigLJ} $(v_SS * v_sigLJ )   # LJ potential between all atoms
pair_coeff    1 1 lj/cut 0.0 0.0             # Except between wall atoms and themselves
pair_modify pair lj/cut shift yes

pair_coeff * * dpd/tstat ${Damp}
jump ECS.in toFreeze

label DT-COS
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${WX} ${Ntab} ${inner} ${outer} "WX" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${BB} ${Ntab} ${inner} ${outer} "BB" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${BT} ${Ntab} ${inner} ${outer} "BT" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${BS} ${Ntab} ${inner} ${outer} "BS" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${TT} ${Ntab} ${inner} ${outer} "TT" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${TS} ${Ntab} ${inner} ${outer} "TS" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 ${epsLJ} ${sigLJ} ${SS} ${Ntab} ${inner} ${outer} "SS" format fffiffs file LJ_COS.py
python        LJ_COS invoke
python        LJ_COS input 7 0.0 ${sigLJ} 0.0 ${Ntab} ${inner} ${outer} "WW" format fffiffs file LJ_COS.py
python        LJ_COS invoke
pair_style hybrid/overlay table linear ${Ntab} dpd/tstat $T $T 2.5 15223
pair_coeff 1 * table LJ-COS.txt WX 2.5
pair_coeff 2 2 table LJ-COS.txt BB 2.5
pair_coeff 2 3 table LJ-COS.txt BT 2.5
pair_coeff 2 4 table LJ-COS.txt BS 2.5
pair_coeff 3 3 table LJ-COS.txt TT 2.5
pair_coeff 3 4 table LJ-COS.txt TS 2.5
pair_coeff 4 4 table LJ-COS.txt SS 2.5
pair_coeff 1 1 table LJ-COS.txt WW 2.5

pair_coeff * * dpd/tstat ${Damp}
label toFreeze




#--- Langevin thermostat the bulk of the walls in y ---#
# Only thermostat the bulk of the wall not the surface or the outer layer

if "${TStat} == D" then "jump ECS.in jumpWrite"
shell rm -f pots.txt
pair_write 1 1 ${Ntab} r ${inner} ${outer} pots.txt WW
pair_write 1 2 ${Ntab} r ${inner} ${outer} pots.txt WX
pair_write 2 2 ${Ntab} r ${inner} ${outer} pots.txt BB
pair_write 2 3 ${Ntab} r ${inner} ${outer} pots.txt BT
pair_write 2 4 ${Ntab} r ${inner} ${outer} pots.txt BS
pair_write 3 3 ${Ntab} r ${inner} ${outer} pots.txt TT
pair_write 3 4 ${Ntab} r ${inner} ${outer} pots.txt TS
pair_write 4 4 ${Ntab} r ${inner} ${outer} pots.txt SS

bond_write 1 ${Ntab} ${inner} ${outer} pots.txt FENE
label jumpWrite

#--- Freeze the bottom layer of the wall ---#
fix             freeze_bout bwout setforce 0.0 0.0 0.0

fix             rwalls all wall/reflect zlo EDGE zhi EDGE        # Reflect all atoms that pass the top or bottom of the simulation box

# Averaging the Thermo Variables
variable       NfreqT   equal ${Nthermo}                  # Calculate bin averages every this many timesteps
variable       NeveryT  equal 100                          # Use input values every this many timesteps
variable       NrepeatT equal ${NfreqT}/${NeveryT}         # Number of times to use input values

fix     pe all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_thermo_pe
fix     temp all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_thermo_temp
fix     meltT all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_melTemp

fix     wallT all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_wallTemp

fix     P all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_thermo_press
fix     pxx all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_thermo_press[1]
fix     pyy all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_thermo_press[2]
fix     pzz all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_thermo_press[3]
fix     pxy all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_thermo_press[4]
fix     pxz all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_thermo_press[5]
fix     pyz all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_thermo_press[6]

fix     Vir all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_Vir
fix     vxx all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_Vir[1]
fix     vyy all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_Vir[2]
fix     vzz all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_Vir[3]
fix     vxy all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_Vir[4]
fix     vxz all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_Vir[5]
fix     vyz all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_Vir[6]

fix     meltP all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_melPress
fix     wallP all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} c_wallPress

fix     meltD all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_melDens

fix     Rg all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_aveRg
fix     Rgx all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_aveRgx
fix     Rgy all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_aveRgy
fix     Rgz all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_aveRgz

fix     D all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_D
fix     srate all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_srate
fix     COF all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_COF
fix     visc all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_visc

fix     Pn_b all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_Pn_b
fix     Ps_b all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_Ps_b
fix     Pn_t all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_Pn_t
fix     Ps_t all ave/time ${NeveryT} ${NrepeatT} ${NfreqT} v_Ps_t

#--- Thermo output ---#

# thermo_style  custom step etotal ke pe epair temp c_melTemp c_wallTemp v_Pcomp press pxx pyy pzz pxy pxz pyz c_Vir c_Vir[1] c_Vir[2] c_Vir[3] c_Vir[4] c_Vir[5] c_Vir[6] c_melPress c_wallPress v_N v_M v_G v_melDens v_surfcov v_aveRg v_aveRgx v_aveRgy v_aveRgz v_Vwall v_Dcomp v_D v_srate v_COF v_visc v_bsurfz zhi v_Pn_b v_Ps_b v_Pn_t v_Ps_t # c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3]
thermo_style  custom step temp press f_pe f_temp f_meltT f_wallT f_P f_pxx f_pyy f_pzz f_pxy f_pxz f_pyz f_Vir f_vxx f_vyy f_vzz f_vxy f_vxz f_vyz f_meltP f_wallP f_meltD f_Rg f_Rgx f_Rgy f_Rgz f_D f_srate f_COF f_visc f_Pn_b v_Ps_b f_Pn_t v_Ps_t v_bsurfz zhi
thermo        ${Nthermo}
thermo_modify flush yes
thermo_modify norm no

if "${skip} == 1" then "jump ECS.in skip2"
############################################################################################################################## STOP
#################
# Equilibration #
#################

#--- Number Density profiles (Equil) ---#
compute         eabeads abeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             abeads_edz abeads ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} eabeads density/number file abeads_edz
compute         esbeads sbeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             sbeads_edz sbeads ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} esbeads density/number file sbeads_edz
compute         ebbeads bbeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             bbeads_edz bbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} ebbeads density/number file bbeads_edz
compute         etbeads tbeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             tbeads_edz tbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} etbeads density/number file tbeads_edz

#--- Freeze the top layer of the wall---#
fix             freeze_tout twout setforce 0.0 0.0 0.0

#--- Dumps ---#

dump            fulleq all custom ${Ndump_e} equil.dump id type xs ys zs mol
#dump            beadseq bbeads custom ${Ndump_e} beads_eq.dump id type xs ys zs mol
#--- Run Equilibration ---#
log         equil.log
info groups variables
info            system
info            coeffs
print "<<<------------------------------- Equilibration -------------------------->>>>"
timestep    ${Tstep}
run         ${Nequil}

undump       fulleq
#undump       beadseq
#--- Unfix Equil ---#

unfix abeads_edz
unfix bbeads_edz
unfix sbeads_edz
unfix tbeads_edz
unfix freeze_tout


###############
# Compression #
###############


#--- Bring the brushes closer together fit the sim box ---#

# variable       bbzmax  equal bound(bbeads,zmax)
# variable       tbzmin  equal bound(tbeads,zmin)
# displace_atoms  alltop move 0.0 0.0 -$(v_tbzmin - v_bbzmax) units box
variable z_f equal bound(all,zmin)
variable z_c equal bound(all,zmax)
change_box all z final ${z_f} $(v_z_c + 0.1) units box  # Shrink the box after compression

#--- Computes ---#

# Number density profiles

compute         cabeads abeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             abeads_cdz abeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cabeads density/number file abeads_cdz
compute         csbeads sbeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             sbeads_cdz sbeads ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} csbeads density/number file sbeads_cdz
compute         cbbeads bbeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             bbeads_cdz bbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cbbeads density/number file bbeads_cdz
compute         ctbeads tbeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             tbeads_cdz tbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} ctbeads density/number file tbeads_cdz

variable Fpre equal (2*lx*ly)                     # This is the force that should be applied to the top face during compression
variable Fcpre equal (-${Fpre})/(count(twout))    # This is the per atom force than need to be applied to the top face
fix             freeze_pre twout setforce 0.0 0.0 NULL          # Make top wall into piston can only move in Z direction
fix             comp_pre twout aveforce 0.0 0.0 ${Fcpre}       # Apply force to each of the top wall atoms

#--- Dumps ---#

dump            fullcp all custom ${Ndump_c} comp.dump id type xs ys zs mol
#dump            beadscp abeads custom ${Ndump_c} beads_cp.dump id type xs ys zs mol
#--- Pre Compression ---#
log         comp.log
print "<<<------------------------------- Pre-Compression -------------------------->>>>"
timestep    ${Tstep}
info            system
run         ${Npre}
unfix       comp_pre
unfix       freeze_pre

# From here we split

if "${Wall_control} == D" then "jump ECS.in toD1"
################################################################# P ##########################
#--- Fixes ---#
#--- Calculate the applied force on each atom for the pressure applied---#
variable Fcomp equal (${Pcomp}*lx*ly)              # This is the force that should be applied to the top face during compression
variable Fcatom equal (-${Fcomp})/(count(twout))   # This is the per atom force than need to be applied to the top face
fix           freeze_tout twout setforce 0.0 0.0 NULL
fix             comp_tout twout aveforce 0.0 0.0 ${Fcatom}       # Apply force to each of the top wall atoms

#--- Run Compression ---#
print "<<<------------------------------- Compression -------------------------->>>>"

timestep    ${Tstep}
info            system
run         ${Ncomp}
undump      fullcp
#undump      beadscp
unfix abeads_cdz
unfix bbeads_cdz
unfix sbeads_cdz
unfix tbeads_cdz
unfix freeze_tout
unfix comp_tout
write_restart  EC.rst


jump ECS.in toP1
label toD1
################################################################# D ###################################
variable displacement equal $(v_Dcomp - v_D)
variable NmoveWall equal $(v_Ncomp * 0.1)
variable Vwallz equal $(v_displacement/(v_NmoveWall * v_Tstep))
variable NfixWall equal $(v_Ncomp - v_NmoveWall)
print "<<<------------------------------- Top Brush Displacement = ${displacement} -------------------------->>>>"

fix           freeze_tout twout setforce 0.0 0.0 0.0
velocity      twout set 0.0 0.0 ${Vwallz}
timestep    ${Tstep}
run         ${NmoveWall}
velocity      twout set 0.0 0.0 0.0
print "<<<------------------------------- Fixed Brush at D = ${D} -------------------------->>>>"

run         ${NfixWall}
undump      fullcp
#undump      beadscp
unfix abeads_cdz
unfix bbeads_cdz
unfix sbeads_cdz
unfix tbeads_cdz
unfix freeze_tout
write_restart  EC.rst

label toP1


###############
# Shearing    #
###############
######################################################################################## Start
label   skip2

#--- Shear Thermostating ---#
if "${TStat} == W" then "jump ECS.in TWS" &
elif "${TStat} == L"  "jump ECS.in LTS" &
elif "${TStat} == D"  "jump ECS.in DTS" &
else "jump ECS.in toWallControl"

label TWS
unfix lang_tbulk
unfix lang_bbulk
compute         TempYt     twbulk temp/partial 0 1 0
fix             langY_tbulk twbulk langevin $T $T ${Damp} 87239 zero yes
fix_modify      langY_tbulk temp TempYt
compute         TempYb     bwbulk temp/partial 0 1 0
fix             langY_bbulk bwbulk langevin $T $T ${Damp} 87239 zero yes
fix_modify      langY_bbulk temp TempYb
jump ECS.in toWallControl

label LTS
unfix lang_melt
unfix lang_tbulk
unfix lang_bbulk
compute         TempYa     abeads temp/partial 0 1 0
fix             langY_melt abeads langevin $T $T ${Damp} 87239 zero yes
fix_modify      langY_melt temp TempYa
compute         TempYt     twbulk temp/partial 0 1 0
fix             langY_tbulk twbulk langevin $T $T ${Damp} 87239 zero yes
fix_modify      langY_tbulk temp TempYt
compute         TempYb     bwbulk temp/partial 0 1 0
fix             langY_bbulk bwbulk langevin $T $T ${Damp} 87239 zero yes
fix_modify      langY_bbulk temp TempYb
jump ECS.in toWallControl
label DTS

label toWallControl

if "${Wall_control} == D" then "jump ECS.in toD2"
################################################################# P ##########################
fix         freeze_shear twout setforce 0.0 0.0 NULL          # Make top wall into piston can only move in Z direction
fix         comp_shear twout aveforce 0.0 0.0 ${Fcatom}       # Apply force to each of the top wall atoms

jump ECS.in toP2
label toD2
################################################################# D ##########################
# FIIIX THE WALL IN THE Z DIRECTION
fix         freeze_shear twout setforce 0.0 0.0 0.0          # Make top wall into piston can only move in Z direction
label toP2

velocity    twout set $(v_Vwall/2) 0.0 0.0  units box       # Apply the relative wall velocities
velocity    bwout set -$(v_Vwall/2) 0.0 0.0  units box      # In opposite directions for each wall


#--- Number Density profiles ---#

compute         sabeads abeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             abeads_sdz abeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sabeads density/number file abeads_sdz
compute         ssbeads sbeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             sbeads_sdz sbeads ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} ssbeads density/number file sbeads_sdz
compute         sbbeads bbeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             bbeads_sdz bbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sbbeads density/number file bbeads_sdz
compute         stbeads tbeads chunk/atom bin/1d z lower $(zhi * v_binres)
fix             tbeads_sdz tbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} stbeads density/number file tbeads_sdz


#--- Temperature and Velocity profiles ---#
compute        eall all chunk/atom bin/1d z lower $(zhi * v_binres)
fix            temp_prof   all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall temp file temp_sz
fix            vel_prof_x_s all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall vx vy file velp_sz

#--- Dumps ---#
dump            fullsh all custom ${Ndump_s} shear.dump id type xs ys zs mol
if "${rest} == 1" then "dump_modify fullsh append yes"
#dump            beadssh abeads custom ${Ndump_s} beads_sh.dump id type xs ys zs mol
restart         10000 ECS.rst ECS.rst
info variables out log
#--- Run Shear ---#
if "${rest} == 1" then "log shear.log append" else "log  shear.log"
info groups variables
info            system
info            coeffs
print "<<<------------------------------- Shearing -------------------------->>>>"
timestep    ${Tstep}
run         ${Nupto} upto

#--- Write Restart File ---#

write_restart  ECS.rst
